#!/usr/bin/env python

"""Create Multiple Experiments configuration files

Creates configuration files for learning experiments for the 
fair_networks script. Files are created so to perform a grid
search through the parameter space specified by a template 
config file. The template file will contain several values
for several parameters and this script will explode that template
into a set of configuration files so that there will be one
configuration file for each possible combination of the given
parameters.


Inputs:
  -- path to the json file with the template to be exploded
  -- path to the folder that will contain the experiments
"""

import os
import sys
import json
import datetime
import logging
from itertools import product

from exputils.creation import check_and_create

def get_timestamp():
    s = str(datetime.datetime.now()).replace(' ', '_').replace(':', '-').split('.')[0]
    return s

def parse_spec_file(spec_file_path):
    with open(spec_file_path, 'r') as json_file:
        specs = json.loads(json_file.read())
        learning_rates = specs['learning_rates']
        schedules = specs['schedules']
        architectures = specs['architectures']
        datasets = specs['datasets']
        fairnesses = specs['fairnesses']
        batch_sizes = specs['batch_sizes']
        noise_types = specs['noise_types']
        ddc = specs['ddc']

        try:
            random_seeds = specs['random_seeds']
            specs = product(learning_rates, schedules, architectures, datasets, fairnesses, batch_sizes, noise_types,
                            random_seeds, ddc)
        except KeyError:
            logging.warning("KeyError while parsing spec_file. Reverting to version without the random_seeds")
            specs = product(learning_rates, schedules, architectures, datasets, fairnesses, batch_sizes, noise_types, [42])

    return specs
    
def create_experiments(specs, experiment_prefix):
    timestamp = get_timestamp()
    for i, spec in enumerate(specs):
        json_dict = create_experiment_json(spec)
        json_path = '/tmp/config.json'
        with open(json_path, 'w') as json_file:
            json.dump(json_dict, json_file, indent=4)
        experiment_name = '{}_{}_{}'.format(experiment_prefix, i, timestamp)
        print("creating: {}".format(experiment_name))
        check_and_create(json_path, experiment_name)
    os.remove('/tmp/config.json')

def fill_dictionary(d):
    d['dataset_base_path'] = '../../data'
    d['model_dir'] = 'models/'
    d['eval_data'] = None
    d['eval_stats'] = False
    d['random_seed'] = 42
    d['output'] = None
    d['resume_ckpt'] = None
    d['checkpoint'] = 'models/model.ckpt'
    d['save_model_schedule'] = '3000:100'
    return d

def create_experiment_json(experiment_spec):
    lr, schedule, architecture, dataset, fairness, batch_size, noise_type, random_seed, ddc = experiment_spec
    d = {}
    d['learning_rate'] = lr
    d['schedule'] = schedule
    d['hidden_layers'] = architecture['hidden_layers']
    d['class_layers'] = architecture['class_layers']
    #d['random_units'] = architecture['random_units']
    d['sensible_layers'] = architecture['sensible_layers']
    d['fairness_importance'] = float(fairness)
    d['dataset'] = dataset
    d['batch_size'] = batch_size
    d['noise_type'] = noise_type
    d['random_seed'] = random_seed
    d['ddc'] = ddc
    d = fill_dictionary(d)
    return d

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Argument error. Usage:")
        print("\t{} <JSON config file> <experiments prefix>".format(sys.argv[0]))
        sys.exit(1)


    spec_file_path = sys.argv[1]
    specs = parse_spec_file(spec_file_path)
    create_experiments(specs, sys.argv[2])
